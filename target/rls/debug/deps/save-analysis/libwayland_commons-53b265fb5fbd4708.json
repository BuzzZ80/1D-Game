{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4","program":"/home/buzz/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","wayland_commons","--edition=2018","/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=53b265fb5fbd4708","-C","extra-filename=-53b265fb5fbd4708","--out-dir","/home/buzz/1dgame-clone/target/rls/debug/deps","-L","dependency=/home/buzz/1dgame-clone/target/rls/debug/deps","--extern","nix=/home/buzz/1dgame-clone/target/rls/debug/deps/libnix-bf2b939cb19b7e83.rmeta","--extern","once_cell=/home/buzz/1dgame-clone/target/rls/debug/deps/libonce_cell-f09fca34c233de76.rmeta","--extern","smallvec=/home/buzz/1dgame-clone/target/rls/debug/deps/libsmallvec-45ba65d3c1acdd23.rmeta","--extern","wayland_sys=/home/buzz/1dgame-clone/target/rls/debug/deps/libwayland_sys-18b8bd4fe75d4e9e.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/buzz/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/buzz/1dgame-clone/target/rls/debug/deps/libwayland_commons-53b265fb5fbd4708.rmeta"},"prelude":{"crate_id":{"name":"wayland_commons","disambiguator":[14692010779302187700,0]},"crate_root":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src","external_crates":[{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[266559774140218402,0]}},{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[11763967750977672065,0]}},{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10106063140927293834,0]}},{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[7335734036341381276,0]}},{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6464017807659102018,0]}},{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[308958561119313021,0]}},{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16887813381474488870,0]}},{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[18138047136180876386,0]}},{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[16720472299414307338,0]}},{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5531791840279234689,0]}},{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[2995214285932701362,0]}},{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17222063258158154566,0]}},{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[7245893233601562531,0]}},{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[4839492760463372304,0]}},{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[1226649225884195013,0]}},{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[12460504831400488231,0]}},{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[2536915343129323536,0]}},{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[4342342869490546433,0]}},{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[2139538778087984071,0]}},{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","num":20,"id":{"name":"nix","disambiguator":[2440305039379765979,0]}},{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","num":21,"id":{"name":"libc","disambiguator":[11407690004646896535,0]}},{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","num":22,"id":{"name":"cfg_if","disambiguator":[243630855546215384,0]}},{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","num":23,"id":{"name":"memoffset","disambiguator":[3019475222698041736,0]}},{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","num":24,"id":{"name":"bitflags","disambiguator":[13756065713963907163,0]}},{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","num":25,"id":{"name":"wayland_sys","disambiguator":[16075631234551911728,0]}},{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","num":26,"id":{"name":"dlib","disambiguator":[957929689340947492,0]}},{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","num":27,"id":{"name":"libloading","disambiguator":[17486897772652595021,0]}},{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","num":28,"id":{"name":"lazy_static","disambiguator":[10224609335574576683,0]}},{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","num":29,"id":{"name":"once_cell","disambiguator":[18281702906408608498,0]}},{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","num":30,"id":{"name":"smallvec","disambiguator":[4341823259427739996,0]}}],"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":0,"byte_end":7686,"line_start":1,"line_end":228,"column_start":1,"column_end":50}},"imports":[{"kind":"Use","ref_id":{"krate":30,"index":88},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":1004,"byte_end":1012,"line_start":31,"line_end":31,"column_start":19,"column_end":27},"alias_span":null,"name":"smallvec","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":0,"byte_end":7686,"line_start":1,"line_end":228,"column_start":1,"column_end":50},"name":"","qualname":"::","value":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":25},{"krate":0,"index":70},{"krate":0,"index":121},{"krate":0,"index":198},{"krate":0,"index":299},{"krate":0,"index":364},{"krate":0,"index":367},{"krate":0,"index":381},{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":387},{"krate":0,"index":615},{"krate":0,"index":619},{"krate":0,"index":401},{"krate":0,"index":404},{"krate":0,"index":410},{"krate":0,"index":413},{"krate":0,"index":415}],"decl_id":null,"docs":" Common definitions for wayland","sig":null,"attributes":[{"value":"/ Common definitions for wayland","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":0,"byte_end":34,"line_start":1,"line_end":1,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":35,"byte_end":38,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate hosts common type and traits used to represent wayland messages","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":39,"byte_end":117,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ and routines in the `wayland-client` and `wayland-server` crates.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":118,"byte_end":187,"line_start":4,"line_end":4,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":188,"byte_end":191,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This notably includes the `Interface` trait, which can exhaustively describe","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":192,"byte_end":272,"line_start":6,"line_end":6,"column_start":1,"column_end":81}},{"value":"/ any wayland interface. Its implementations are intended to be generated by the","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":273,"byte_end":355,"line_start":7,"line_end":7,"column_start":1,"column_end":83}},{"value":"/ `wayland-scanner` crate.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":356,"byte_end":384,"line_start":8,"line_end":8,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":385,"byte_end":388,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ The principal user-facing definition provided by this crate is the `Implementation`","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":389,"byte_end":476,"line_start":10,"line_end":10,"column_start":1,"column_end":88}},{"value":"/ trait, which as a user of `wayland-client` or `wayland-server` you will be using","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":477,"byte_end":561,"line_start":11,"line_end":11,"column_start":1,"column_end":85}},{"value":"/ to define objects able to handle the messages your program receives. Note that","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":562,"byte_end":644,"line_start":12,"line_end":12,"column_start":1,"column_end":83}},{"value":"/ this trait is auto-implemented for closures with appropriate signature, for","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":645,"byte_end":724,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ convenience.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":725,"byte_end":741,"line_start":14,"line_end":14,"column_start":1,"column_end":17}},{"value":"warn(missing_docs, missing_debug_implementations)","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":743,"byte_end":796,"line_start":16,"line_end":16,"column_start":1,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":10},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/debug.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"debug","qualname":"::debug","value":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/debug.rs","parent":null,"children":[{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24}],"decl_id":null,"docs":" Debugging helpers to handle `WAYLAND_DEBUG` env variable.\n","sig":null,"attributes":[{"value":"/ Debugging helpers to handle `WAYLAND_DEBUG` env variable.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/debug.rs","byte_start":7688,"byte_end":7749,"line_start":1,"line_end":1,"column_start":1,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":21},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/debug.rs","byte_start":7945,"byte_end":7969,"line_start":10,"line_end":10,"column_start":8,"column_end":32},"name":"print_dispatched_message","qualname":"::debug::print_dispatched_message","value":"pub fn print_dispatched_message(&str, u32, &str, &[Argument])","parent":null,"children":[],"decl_id":null,"docs":" Print the dispatched message to stderr in a following format:","sig":null,"attributes":[{"value":"/ Print the dispatched message to stderr in a following format:","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/debug.rs","byte_start":7821,"byte_end":7886,"line_start":7,"line_end":7,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/debug.rs","byte_start":7887,"byte_end":7890,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [timestamp] <- interface@id.msg_name(args)","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/debug.rs","byte_start":7891,"byte_end":7937,"line_start":9,"line_end":9,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":22},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/debug.rs","byte_start":8397,"byte_end":8415,"line_start":27,"line_end":27,"column_start":8,"column_end":26},"name":"print_send_message","qualname":"::debug::print_send_message","value":"pub fn print_send_message(&str, u32, bool, &str, &[Argument])","parent":null,"children":[],"decl_id":null,"docs":" Print the send message to stderr in a following format:","sig":null,"attributes":[{"value":"/ Print the send message to stderr in a following format:","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/debug.rs","byte_start":8210,"byte_end":8269,"line_start":22,"line_end":22,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/debug.rs","byte_start":8270,"byte_end":8273,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ [timestamp] -> interface@id.msg_name(args)","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/debug.rs","byte_start":8274,"byte_end":8320,"line_start":24,"line_end":24,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/debug.rs","byte_start":8321,"byte_end":8324,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ If `is_alive` is `false` the `[ZOMBIE]` is added after `id`.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/debug.rs","byte_start":8325,"byte_end":8389,"line_start":26,"line_end":26,"column_start":1,"column_end":65}}]},{"kind":"Mod","id":{"krate":0,"index":25},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"filter","qualname":"::filter","value":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":49},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":65}],"decl_id":null,"docs":" Filter\n","sig":null,"attributes":[{"value":"/ Filter","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":9442,"byte_end":9452,"line_start":1,"line_end":1,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":36},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":10002,"byte_end":10014,"line_start":15,"line_end":15,"column_start":12,"column_end":24},"name":"DispatchData","qualname":"::filter::DispatchData","value":"DispatchData {  }","parent":null,"children":[{"krate":0,"index":38}],"decl_id":null,"docs":" Holder of global dispatch-related data","sig":null,"attributes":[{"value":"/ Holder of global dispatch-related data","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":9512,"byte_end":9554,"line_start":5,"line_end":5,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":9555,"byte_end":9558,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This struct serves as a dynamic container for the dispatch-time","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":9559,"byte_end":9626,"line_start":7,"line_end":7,"column_start":1,"column_end":68}},{"value":"/ global data that you gave to the dispatch method, and is given as","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":9627,"byte_end":9696,"line_start":8,"line_end":8,"column_start":1,"column_end":70}},{"value":"/ input to all your callbacks. It allows you to share global state","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":9697,"byte_end":9765,"line_start":9,"line_end":9,"column_start":1,"column_end":69}},{"value":"/ between your filters.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":9766,"byte_end":9791,"line_start":10,"line_end":10,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":9792,"byte_end":9795,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ The main method of interest is the `get` method, which allows you to","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":9796,"byte_end":9868,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"/ access a `&mut _` reference to the global data itself. The other methods","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":9869,"byte_end":9945,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/ are mostly used internally by the crate.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":9946,"byte_end":9990,"line_start":14,"line_end":14,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":10419,"byte_end":10422,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"get","qualname":"<DispatchData>::get","value":"pub fn get<T: std::any::Any>(&mut Self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Access the dispatch data knowing its type","sig":null,"attributes":[{"value":"/ Access the dispatch data knowing its type","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":10267,"byte_end":10312,"line_start":26,"line_end":26,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":10317,"byte_end":10320,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ Will return `None` if the provided type is not the correct","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":10325,"byte_end":10387,"line_start":28,"line_end":28,"column_start":5,"column_end":67}},{"value":"/ inner type.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":10392,"byte_end":10407,"line_start":29,"line_end":29,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":10631,"byte_end":10635,"line_start":37,"line_end":37,"column_start":12,"column_end":16},"name":"wrap","qualname":"<DispatchData>::wrap","value":"pub fn wrap<T: std::any::Any>(&'a mut T) -> DispatchData","parent":null,"children":[],"decl_id":null,"docs":" Wrap a mutable reference","sig":null,"attributes":[{"value":"/ Wrap a mutable reference","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":10516,"byte_end":10544,"line_start":34,"line_end":34,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":10549,"byte_end":10552,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ This creates a new `DispatchData` from a mutable reference","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":10557,"byte_end":10619,"line_start":36,"line_end":36,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":11019,"byte_end":11027,"line_start":46,"line_end":46,"column_start":12,"column_end":20},"name":"reborrow","qualname":"<DispatchData>::reborrow","value":"pub fn reborrow(&mut Self) -> DispatchData","parent":null,"children":[],"decl_id":null,"docs":" Reborrows this `DispatchData` to create a new one with the same content","sig":null,"attributes":[{"value":"/ Reborrows this `DispatchData` to create a new one with the same content","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":10734,"byte_end":10809,"line_start":41,"line_end":41,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":10814,"byte_end":10817,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ This is a quick and cheap way to propagate the `DispatchData` down a","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":10822,"byte_end":10894,"line_start":43,"line_end":43,"column_start":5,"column_end":77}},{"value":"/ callback stack by value. It is basically a noop only there to ease","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":10899,"byte_end":10969,"line_start":44,"line_end":44,"column_start":5,"column_end":75}},{"value":"/ work with the borrow checker.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":10974,"byte_end":11007,"line_start":45,"line_end":45,"column_start":5,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":56},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":11907,"byte_end":11913,"line_start":72,"line_end":72,"column_start":12,"column_end":18},"name":"Filter","qualname":"::filter::Filter","value":"Filter {  }","parent":null,"children":[{"krate":0,"index":58}],"decl_id":null,"docs":" An event filter","sig":null,"attributes":[{"value":"/ An event filter","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":11274,"byte_end":11293,"line_start":58,"line_end":58,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":11294,"byte_end":11297,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ Can be used in wayland-client and wayland-server to aggregate","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":11298,"byte_end":11363,"line_start":60,"line_end":60,"column_start":1,"column_end":66}},{"value":"/ messages from different objects into the same closure.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":11364,"byte_end":11422,"line_start":61,"line_end":61,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":11423,"byte_end":11426,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ You need to provide it a closure of type `FnMut(E, &Filter<E>)`,","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":11427,"byte_end":11495,"line_start":63,"line_end":63,"column_start":1,"column_end":69}},{"value":"/ which will be called any time a message is sent to the filter","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":11496,"byte_end":11561,"line_start":64,"line_end":64,"column_start":1,"column_end":66}},{"value":"/ via the `send(..)` method. Your closure also receives a handle","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":11562,"byte_end":11628,"line_start":65,"line_end":65,"column_start":1,"column_end":67}},{"value":"/ to the filter as argument, so that you can use it from within","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":11629,"byte_end":11694,"line_start":66,"line_end":66,"column_start":1,"column_end":66}},{"value":"/ the callback (to assign new wayland objects to this filter for","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":11695,"byte_end":11761,"line_start":67,"line_end":67,"column_start":1,"column_end":67}},{"value":"/ example).","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":11762,"byte_end":11775,"line_start":68,"line_end":68,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":11776,"byte_end":11779,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ The `Filter` can be cloned, and all clones send messages to the","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":11780,"byte_end":11847,"line_start":70,"line_end":70,"column_start":1,"column_end":68}},{"value":"/ same closure. However it is not threadsafe.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":11848,"byte_end":11895,"line_start":71,"line_end":71,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":12366,"byte_end":12369,"line_start":90,"line_end":90,"column_start":12,"column_end":15},"name":"new","qualname":"<Filter<E>>::new","value":"pub fn new<F: FnMut(E, &Filter<E>, DispatchData) -> () + 'static>(F)\n-> Filter<E>","parent":null,"children":[],"decl_id":null,"docs":" Create a new filter from given closure\n","sig":null,"attributes":[{"value":"/ Create a new filter from given closure","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":12312,"byte_end":12354,"line_start":89,"line_end":89,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":12626,"byte_end":12630,"line_start":97,"line_end":97,"column_start":12,"column_end":16},"name":"send","qualname":"<Filter<E>>::send","value":"pub fn send(&Self, E, DispatchData)","parent":null,"children":[],"decl_id":null,"docs":" Send a message to this filter\n","sig":null,"attributes":[{"value":"/ Send a message to this filter","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":12581,"byte_end":12614,"line_start":96,"line_end":96,"column_start":5,"column_end":38}}]},{"kind":"Mod","id":{"krate":0,"index":70},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"map","qualname":"::map","value":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":87},{"krate":0,"index":417},{"krate":0,"index":426},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":101},{"krate":0,"index":429},{"krate":0,"index":433},{"krate":0,"index":436},{"krate":0,"index":104},{"krate":0,"index":117},{"krate":0,"index":119}],"decl_id":null,"docs":" Wayland objects map\n","sig":null,"attributes":[{"value":"/ Wayland objects map","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":13154,"byte_end":13177,"line_start":1,"line_end":1,"column_start":1,"column_end":24}}]},{"kind":"Const","id":{"krate":0,"index":84},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":13348,"byte_end":13363,"line_start":7,"line_end":7,"column_start":11,"column_end":26},"name":"SERVER_ID_LIMIT","qualname":"::map::SERVER_ID_LIMIT","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Limit separating server-created from client-created objects IDs in the namespace\n","sig":null,"attributes":[{"value":"/ Limit separating server-created from client-created objects IDs in the namespace","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":13253,"byte_end":13337,"line_start":6,"line_end":6,"column_start":1,"column_end":85}}]},{"kind":"Trait","id":{"krate":0,"index":85},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":13487,"byte_end":13501,"line_start":11,"line_end":11,"column_start":11,"column_end":25},"name":"ObjectMetadata","qualname":"::map::ObjectMetadata","value":"ObjectMetadata: Clone","parent":null,"children":[{"krate":0,"index":86}],"decl_id":null,"docs":" A trait representing the metadata a wayland implementation\n may attach to an object.\n","sig":null,"attributes":[{"value":"/ A trait representing the metadata a wayland implementation","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":13385,"byte_end":13447,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"/ may attach to an object.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":13448,"byte_end":13476,"line_start":10,"line_end":10,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":13642,"byte_end":13647,"line_start":15,"line_end":15,"column_start":8,"column_end":13},"name":"child","qualname":"::map::ObjectMetadata::child","value":"pub fn child(&Self) -> Self","parent":{"krate":0,"index":85},"children":[],"decl_id":null,"docs":" Create the metadata for a child object","sig":null,"attributes":[{"value":"/ Create the metadata for a child object","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":13515,"byte_end":13557,"line_start":12,"line_end":12,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":13562,"byte_end":13565,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ Mostly needed for client side, to propagate the event queues","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":13570,"byte_end":13634,"line_start":14,"line_end":14,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":417},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":13794,"byte_end":13800,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"name":"Object","qualname":"::map::Object","value":"Object { interface, version, requests, events, meta, childs_from_events, childs_from_requests }","parent":null,"children":[{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425}],"decl_id":null,"docs":" The representation of a protocol object\n","sig":null,"attributes":[{"value":"/ The representation of a protocol object","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":13722,"byte_end":13765,"line_start":22,"line_end":22,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":419},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":13871,"byte_end":13880,"line_start":26,"line_end":26,"column_start":9,"column_end":18},"name":"interface","qualname":"::map::Object::interface","value":"&'static str","parent":{"krate":0,"index":417},"children":[],"decl_id":null,"docs":" Interface name of this object\n","sig":null,"attributes":[{"value":"/ Interface name of this object","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":13829,"byte_end":13862,"line_start":25,"line_end":25,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":420},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":13935,"byte_end":13942,"line_start":28,"line_end":28,"column_start":9,"column_end":16},"name":"version","qualname":"::map::Object::version","value":"u32","parent":{"krate":0,"index":417},"children":[],"decl_id":null,"docs":" Version of this object\n","sig":null,"attributes":[{"value":"/ Version of this object","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":13900,"byte_end":13926,"line_start":27,"line_end":27,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":421},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":14008,"byte_end":14016,"line_start":30,"line_end":30,"column_start":9,"column_end":17},"name":"requests","qualname":"::map::Object::requests","value":"&'static [wire::MessageDesc]","parent":{"krate":0,"index":417},"children":[],"decl_id":null,"docs":" Description of the requests of this object\n","sig":null,"attributes":[{"value":"/ Description of the requests of this object","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":13953,"byte_end":13999,"line_start":29,"line_end":29,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":422},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":14112,"byte_end":14118,"line_start":32,"line_end":32,"column_start":9,"column_end":15},"name":"events","qualname":"::map::Object::events","value":"&'static [wire::MessageDesc]","parent":{"krate":0,"index":417},"children":[],"decl_id":null,"docs":" Description of the events of this object\n","sig":null,"attributes":[{"value":"/ Description of the events of this object","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":14059,"byte_end":14103,"line_start":31,"line_end":31,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":423},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":14242,"byte_end":14246,"line_start":34,"line_end":34,"column_start":9,"column_end":13},"name":"meta","qualname":"::map::Object::meta","value":"Meta","parent":{"krate":0,"index":417},"children":[],"decl_id":null,"docs":" Metadata associated to this object (ex: its event queue client side)\n","sig":null,"attributes":[{"value":"/ Metadata associated to this object (ex: its event queue client side)","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":14161,"byte_end":14233,"line_start":33,"line_end":33,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":424},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":14394,"byte_end":14412,"line_start":37,"line_end":37,"column_start":9,"column_end":27},"name":"childs_from_events","qualname":"::map::Object::childs_from_events","value":"for<'r> fn(u16, u32, &'r Meta) -> std::option::Option<map::Object<Meta>>","parent":{"krate":0,"index":417},"children":[],"decl_id":null,"docs":" A function which, from an opcode, a version, and the Meta, creates a child\n object associated with this event if any\n","sig":null,"attributes":[{"value":"/ A function which, from an opcode, a version, and the Meta, creates a child","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":14258,"byte_end":14336,"line_start":35,"line_end":35,"column_start":5,"column_end":83}},{"value":"/ object associated with this event if any","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":14341,"byte_end":14385,"line_start":36,"line_end":36,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":425},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":14601,"byte_end":14621,"line_start":40,"line_end":40,"column_start":9,"column_end":29},"name":"childs_from_requests","qualname":"::map::Object::childs_from_requests","value":"for<'r> fn(u16, u32, &'r Meta) -> std::option::Option<map::Object<Meta>>","parent":{"krate":0,"index":417},"children":[],"decl_id":null,"docs":" A function which, from an opcode, a version, and the Meta, creates a child\n object associated with this request if any\n","sig":null,"attributes":[{"value":"/ A function which, from an opcode, a version, and the Meta, creates a child","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":14463,"byte_end":14541,"line_start":38,"line_end":38,"column_start":5,"column_end":83}},{"value":"/ object associated with this request if any","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":14546,"byte_end":14592,"line_start":39,"line_end":39,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":15234,"byte_end":15248,"line_start":57,"line_end":57,"column_start":12,"column_end":26},"name":"from_interface","qualname":"<Object<Meta>>::from_interface","value":"pub fn from_interface<I: Interface>(u32, Meta) -> Object<Meta>","parent":null,"children":[],"decl_id":null,"docs":" Create an Object corresponding to given interface and version\n","sig":null,"attributes":[{"value":"/ Create an Object corresponding to given interface and version","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":15157,"byte_end":15222,"line_start":56,"line_end":56,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":15755,"byte_end":15766,"line_start":71,"line_end":71,"column_start":12,"column_end":23},"name":"event_child","qualname":"<Object<Meta>>::event_child","value":"pub fn event_child(&Self, u16) -> Option<Object<Meta>>","parent":null,"children":[],"decl_id":null,"docs":" Create an optional `Object` corresponding to the possible `new_id` associated\n with given event opcode\n","sig":null,"attributes":[{"value":"/ Create an optional `Object` corresponding to the possible `new_id` associated","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":15630,"byte_end":15711,"line_start":69,"line_end":69,"column_start":5,"column_end":86}},{"value":"/ with given event opcode","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":15716,"byte_end":15743,"line_start":70,"line_end":70,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":16019,"byte_end":16032,"line_start":77,"line_end":77,"column_start":12,"column_end":25},"name":"request_child","qualname":"<Object<Meta>>::request_child","value":"pub fn request_child(&Self, u16) -> Option<Object<Meta>>","parent":null,"children":[],"decl_id":null,"docs":" Create an optional `Object` corresponding to the possible `new_id` associated\n with given request opcode\n","sig":null,"attributes":[{"value":"/ Create an optional `Object` corresponding to the possible `new_id` associated","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":15892,"byte_end":15973,"line_start":75,"line_end":75,"column_start":5,"column_end":86}},{"value":"/ with given request opcode","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":15978,"byte_end":16007,"line_start":76,"line_end":76,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":16223,"byte_end":16235,"line_start":82,"line_end":82,"column_start":12,"column_end":24},"name":"is_interface","qualname":"<Object<Meta>>::is_interface","value":"pub fn is_interface<I: Interface>(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check whether this object is of given interface\n","sig":null,"attributes":[{"value":"/ Check whether this object is of given interface","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":16160,"byte_end":16211,"line_start":81,"line_end":81,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":16458,"byte_end":16469,"line_start":88,"line_end":88,"column_start":12,"column_end":23},"name":"placeholder","qualname":"<Object<Meta>>::placeholder","value":"pub fn placeholder(Meta) -> Object<Meta>","parent":null,"children":[],"decl_id":null,"docs":" Create a placeholder object that will be filled-in by the message logic\n","sig":null,"attributes":[{"value":"/ Create a placeholder object that will be filled-in by the message logic","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":16371,"byte_end":16446,"line_start":87,"line_end":87,"column_start":5,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":429},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":17163,"byte_end":17172,"line_start":114,"line_end":114,"column_start":12,"column_end":21},"name":"ObjectMap","qualname":"::map::ObjectMap","value":"ObjectMap {  }","parent":null,"children":[{"krate":0,"index":431},{"krate":0,"index":432}],"decl_id":null,"docs":" A holder for the object store of a connection","sig":null,"attributes":[{"value":"/ A holder for the object store of a connection","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":16961,"byte_end":17010,"line_start":109,"line_end":109,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":17011,"byte_end":17014,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ Keeps track of which object id is associated to which","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":17015,"byte_end":17072,"line_start":111,"line_end":111,"column_start":1,"column_end":58}},{"value":"/ interface object, and which is currently unused.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":17073,"byte_end":17125,"line_start":112,"line_end":112,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":17388,"byte_end":17391,"line_start":121,"line_end":121,"column_start":12,"column_end":15},"name":"new","qualname":"<ObjectMap<Meta>>::new","value":"pub fn new() -> ObjectMap<Meta>","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty object map\n","sig":null,"attributes":[{"value":"/ Create a new empty object map","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":17343,"byte_end":17376,"line_start":120,"line_end":120,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":17546,"byte_end":17550,"line_start":126,"line_end":126,"column_start":12,"column_end":16},"name":"find","qualname":"<ObjectMap<Meta>>::find","value":"pub fn find(&Self, u32) -> Option<Object<Meta>>","parent":null,"children":[],"decl_id":null,"docs":" Find an object in the store\n","sig":null,"attributes":[{"value":"/ Find an object in the store","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":17503,"byte_end":17534,"line_start":125,"line_end":125,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":17996,"byte_end":18002,"line_start":139,"line_end":139,"column_start":12,"column_end":18},"name":"remove","qualname":"<ObjectMap<Meta>>::remove","value":"pub fn remove(&mut Self, u32)","parent":null,"children":[],"decl_id":null,"docs":" Remove an object from the store","sig":null,"attributes":[{"value":"/ Remove an object from the store","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":17881,"byte_end":17916,"line_start":136,"line_end":136,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":17921,"byte_end":17924,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ Does nothing if the object didn't previously exists","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":17929,"byte_end":17984,"line_start":138,"line_end":138,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":18682,"byte_end":18691,"line_start":157,"line_end":157,"column_start":12,"column_end":21},"name":"insert_at","qualname":"<ObjectMap<Meta>>::insert_at","value":"pub fn insert_at(&mut Self, u32, Object<Meta>) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Insert given object for given id","sig":null,"attributes":[{"value":"/ Insert given object for given id","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":18385,"byte_end":18421,"line_start":151,"line_end":151,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":18426,"byte_end":18429,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ Can fail if the requested id is not the next free id of this store.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":18434,"byte_end":18505,"line_start":153,"line_end":153,"column_start":5,"column_end":76}},{"value":"/ (In which case this is a protocol error)","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":18510,"byte_end":18554,"line_start":154,"line_end":154,"column_start":5,"column_end":49}},{"value":"allow(clippy :: result_unit_err)","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":18637,"byte_end":18670,"line_start":156,"line_end":156,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":19116,"byte_end":19133,"line_start":168,"line_end":168,"column_start":12,"column_end":29},"name":"client_insert_new","qualname":"<ObjectMap<Meta>>::client_insert_new","value":"pub fn client_insert_new(&mut Self, Object<Meta>) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new id for an object in the client namespace\n","sig":null,"attributes":[{"value":"/ Allocate a new id for an object in the client namespace","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":19045,"byte_end":19104,"line_start":167,"line_end":167,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":19314,"byte_end":19331,"line_start":173,"line_end":173,"column_start":12,"column_end":29},"name":"server_insert_new","qualname":"<ObjectMap<Meta>>::server_insert_new","value":"pub fn server_insert_new(&mut Self, Object<Meta>) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Allocate a new id for an object in the server namespace\n","sig":null,"attributes":[{"value":"/ Allocate a new id for an object in the server namespace","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":19243,"byte_end":19302,"line_start":172,"line_end":172,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":19622,"byte_end":19626,"line_start":180,"line_end":180,"column_start":12,"column_end":16},"name":"with","qualname":"<ObjectMap<Meta>>::with","value":"pub fn with<T, F: FnOnce(&mut Object<Meta>) -> T>(&mut Self, u32, F)\n-> Result<T, ()>","parent":null,"children":[],"decl_id":null,"docs":" Mutably access an object of the map\n","sig":null,"attributes":[{"value":"/ Mutably access an object of the map","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":19455,"byte_end":19494,"line_start":177,"line_end":177,"column_start":5,"column_end":44}},{"value":"allow(clippy :: result_unit_err)","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":19577,"byte_end":19610,"line_start":179,"line_end":179,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":20276,"byte_end":20284,"line_start":200,"line_end":200,"column_start":12,"column_end":20},"name":"with_all","qualname":"<ObjectMap<Meta>>::with_all","value":"pub fn with_all<F: FnMut(u32, &mut Object<Meta>) -> ()>(&mut Self, F)","parent":null,"children":[],"decl_id":null,"docs":" Mutably access all objects of the map in sequence\n","sig":null,"attributes":[{"value":"/ Mutably access all objects of the map in sequence","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":20211,"byte_end":20264,"line_start":199,"line_end":199,"column_start":5,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":121},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"socket","qualname":"::socket","value":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":132},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":140},{"krate":0,"index":143},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":150},{"krate":0,"index":153},{"krate":0,"index":156},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":439},{"krate":0,"index":441},{"krate":0,"index":161},{"krate":0,"index":167},{"krate":0,"index":169},{"krate":0,"index":171},{"krate":0,"index":173},{"krate":0,"index":444},{"krate":0,"index":450},{"krate":0,"index":175},{"krate":0,"index":452},{"krate":0,"index":457},{"krate":0,"index":188}],"decl_id":null,"docs":" Wayland socket manipulation\n","sig":null,"attributes":[{"value":"/ Wayland socket manipulation","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":21750,"byte_end":21781,"line_start":1,"line_end":1,"column_start":1,"column_end":32}}]},{"kind":"Const","id":{"krate":0,"index":159},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":22071,"byte_end":22082,"line_start":13,"line_end":13,"column_start":11,"column_end":22},"name":"MAX_FDS_OUT","qualname":"::socket::MAX_FDS_OUT","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Maximum number of FD that can be sent in a single socket message\n","sig":null,"attributes":[{"value":"/ Maximum number of FD that can be sent in a single socket message","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":21992,"byte_end":22060,"line_start":12,"line_end":12,"column_start":1,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":160},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":22178,"byte_end":22191,"line_start":15,"line_end":15,"column_start":11,"column_end":24},"name":"MAX_BYTES_OUT","qualname":"::socket::MAX_BYTES_OUT","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" Maximum number of bytes that can be sent in a single socket message\n","sig":null,"attributes":[{"value":"/ Maximum number of bytes that can be sent in a single socket message","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":22096,"byte_end":22167,"line_start":14,"line_end":14,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":439},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":22275,"byte_end":22281,"line_start":23,"line_end":23,"column_start":12,"column_end":18},"name":"Socket","qualname":"::socket::Socket","value":"Socket {  }","parent":null,"children":[{"krate":0,"index":440}],"decl_id":null,"docs":" A wayland socket\n","sig":null,"attributes":[{"value":"/ A wayland socket","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":22226,"byte_end":22246,"line_start":21,"line_end":21,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":22649,"byte_end":22657,"line_start":35,"line_end":35,"column_start":12,"column_end":20},"name":"send_msg","qualname":"<Socket>::send_msg","value":"pub fn send_msg(&Self, &[u8], &[RawFd]) -> NixResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Send a single message to the socket","sig":null,"attributes":[{"value":"/ Send a single message to the socket","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":22320,"byte_end":22359,"line_start":28,"line_end":28,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":22364,"byte_end":22367,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ A single socket message can contain several wayland messages","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":22372,"byte_end":22436,"line_start":30,"line_end":30,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":22441,"byte_end":22444,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ The `fds` slice should not be longer than `MAX_FDS_OUT`, and the `bytes`","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":22449,"byte_end":22525,"line_start":32,"line_end":32,"column_start":5,"column_end":81}},{"value":"/ slice should not be longer than `MAX_BYTES_OUT` otherwise the receiving","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":22530,"byte_end":22605,"line_start":33,"line_end":33,"column_start":5,"column_end":80}},{"value":"/ end may lose some data.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":22610,"byte_end":22637,"line_start":34,"line_end":34,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":23567,"byte_end":23574,"line_start":57,"line_end":57,"column_start":12,"column_end":19},"name":"rcv_msg","qualname":"<Socket>::rcv_msg","value":"pub fn rcv_msg(&Self, &mut [u8], &mut [RawFd]) -> NixResult<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Receive a single message from the socket","sig":null,"attributes":[{"value":"/ Receive a single message from the socket","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":23092,"byte_end":23136,"line_start":46,"line_end":46,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":23141,"byte_end":23144,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ Return the number of bytes received and the number of Fds received.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":23149,"byte_end":23220,"line_start":48,"line_end":48,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":23225,"byte_end":23228,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ Errors with `WouldBlock` is no message is available.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":23233,"byte_end":23289,"line_start":50,"line_end":50,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":23294,"byte_end":23297,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ A single socket message can contain several wayland messages.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":23302,"byte_end":23367,"line_start":52,"line_end":52,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":23372,"byte_end":23375,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ The `buffer` slice should be at least `MAX_BYTES_OUT` long and the `fds`","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":23380,"byte_end":23456,"line_start":54,"line_end":54,"column_start":5,"column_end":81}},{"value":"/ slice `MAX_FDS_OUT` long, otherwise some data of the received message may","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":23461,"byte_end":23538,"line_start":55,"line_end":55,"column_start":5,"column_end":82}},{"value":"/ be lost.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":23543,"byte_end":23555,"line_start":56,"line_end":56,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":24415,"byte_end":24418,"line_start":81,"line_end":81,"column_start":12,"column_end":15},"name":"opt","qualname":"<Socket>::opt","value":"pub fn opt<O: socket::GetSockOpt>(&Self, O) -> NixResult<O::Val>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the current value of the requested [socket::GetSockOpt]\n","sig":null,"attributes":[{"value":"/ Retrieve the current value of the requested [socket::GetSockOpt]","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":24335,"byte_end":24403,"line_start":80,"line_end":80,"column_start":5,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":444},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":25082,"byte_end":25096,"line_start":117,"line_end":117,"column_start":12,"column_end":26},"name":"BufferedSocket","qualname":"::socket::BufferedSocket","value":"BufferedSocket {  }","parent":null,"children":[{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449}],"decl_id":null,"docs":" An adapter around a raw Socket that directly handles buffering and\n conversion from/to wayland messages\n","sig":null,"attributes":[{"value":"/ An adapter around a raw Socket that directly handles buffering and","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":24943,"byte_end":25013,"line_start":114,"line_end":114,"column_start":1,"column_end":71}},{"value":"/ conversion from/to wayland messages","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":25014,"byte_end":25053,"line_start":115,"line_end":115,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":25308,"byte_end":25311,"line_start":127,"line_end":127,"column_start":12,"column_end":15},"name":"new","qualname":"<BufferedSocket>::new","value":"pub fn new(Socket) -> BufferedSocket","parent":null,"children":[],"decl_id":null,"docs":" Wrap a Socket into a Buffered Socket\n","sig":null,"attributes":[{"value":"/ Wrap a Socket into a Buffered Socket","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":25256,"byte_end":25296,"line_start":126,"line_end":126,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":25780,"byte_end":25790,"line_start":138,"line_end":138,"column_start":12,"column_end":22},"name":"get_socket","qualname":"<BufferedSocket>::get_socket","value":"pub fn get_socket(&mut Self) -> &mut Socket","parent":null,"children":[],"decl_id":null,"docs":" Get direct access to the underlying socket\n","sig":null,"attributes":[{"value":"/ Get direct access to the underlying socket","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":25722,"byte_end":25768,"line_start":137,"line_end":137,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":25988,"byte_end":25999,"line_start":145,"line_end":145,"column_start":12,"column_end":23},"name":"into_socket","qualname":"<BufferedSocket>::into_socket","value":"pub fn into_socket(Self) -> Socket","parent":null,"children":[],"decl_id":null,"docs":" Retrieve ownership of the underlying Socket","sig":null,"attributes":[{"value":"/ Retrieve ownership of the underlying Socket","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":25855,"byte_end":25902,"line_start":142,"line_end":142,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":25907,"byte_end":25910,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Any leftover content in the internal buffers will be lost","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":25915,"byte_end":25976,"line_start":144,"line_end":144,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":26122,"byte_end":26127,"line_start":150,"line_end":150,"column_start":12,"column_end":17},"name":"flush","qualname":"<BufferedSocket>::flush","value":"pub fn flush(&mut Self) -> NixResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Flush the contents of the outgoing buffer into the socket\n","sig":null,"attributes":[{"value":"/ Flush the contents of the outgoing buffer into the socket","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":26049,"byte_end":26110,"line_start":149,"line_end":149,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":27815,"byte_end":27828,"line_start":199,"line_end":199,"column_start":12,"column_end":25},"name":"write_message","qualname":"<BufferedSocket>::write_message","value":"pub fn write_message(&mut Self, &Message) -> NixResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a message to the outgoing buffer","sig":null,"attributes":[{"value":"/ Write a message to the outgoing buffer","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":27553,"byte_end":27595,"line_start":193,"line_end":193,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":27600,"byte_end":27603,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ This method may flush the internal buffer if necessary (if it is full).","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":27608,"byte_end":27683,"line_start":195,"line_end":195,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":27688,"byte_end":27691,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ If the message is too big to fit in the buffer, the error `Error::Sys(E2BIG)`","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":27696,"byte_end":27777,"line_start":197,"line_end":197,"column_start":5,"column_end":86}},{"value":"/ will be returned.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":27782,"byte_end":27803,"line_start":198,"line_end":198,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":28433,"byte_end":28454,"line_start":215,"line_end":215,"column_start":12,"column_end":33},"name":"fill_incoming_buffers","qualname":"<BufferedSocket>::fill_incoming_buffers","value":"pub fn fill_incoming_buffers(&mut Self) -> NixResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Try to fill the incoming buffers of this socket, to prepare\n a new round of parsing.\n","sig":null,"attributes":[{"value":"/ Try to fill the incoming buffers of this socket, to prepare","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":28326,"byte_end":28389,"line_start":213,"line_end":213,"column_start":5,"column_end":68}},{"value":"/ a new round of parsing.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":28394,"byte_end":28421,"line_start":214,"line_end":214,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":30301,"byte_end":30317,"line_start":257,"line_end":257,"column_start":12,"column_end":28},"name":"read_one_message","qualname":"<BufferedSocket>::read_one_message","value":"pub fn read_one_message<F>(&mut Self, F) -> Result<Message, MessageParseError>\nwhere F: FnMut(u32, u16) -> Option<&'static [ArgumentType]>","parent":null,"children":[],"decl_id":null,"docs":" Read and deserialize a single message from the incoming buffers socket","sig":null,"attributes":[{"value":"/ Read and deserialize a single message from the incoming buffers socket","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":29399,"byte_end":29473,"line_start":242,"line_end":242,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":29478,"byte_end":29481,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ This method requires one closure that given an object id and an opcode,","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":29486,"byte_end":29561,"line_start":244,"line_end":244,"column_start":5,"column_end":80}},{"value":"/ must provide the signature of the associated request/event, in the form of","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":29566,"byte_end":29644,"line_start":245,"line_end":245,"column_start":5,"column_end":83}},{"value":"/ a `&'static [ArgumentType]`. If it returns `None`, meaning that","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":29649,"byte_end":29716,"line_start":246,"line_end":246,"column_start":5,"column_end":72}},{"value":"/ the couple object/opcode does not exist, an error will be returned.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":29721,"byte_end":29792,"line_start":247,"line_end":247,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":29797,"byte_end":29800,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ There are 3 possibilities of return value:","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":29805,"byte_end":29851,"line_start":249,"line_end":249,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":29856,"byte_end":29859,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ - `Ok(Ok(msg))`: no error occurred, this is the message","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":29864,"byte_end":29923,"line_start":251,"line_end":251,"column_start":5,"column_end":64}},{"value":"/ - `Ok(Err(e))`: either a malformed message was encountered or we need more data,","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":29928,"byte_end":30012,"line_start":252,"line_end":252,"column_start":5,"column_end":89}},{"value":"/    in the latter case you need to try calling `fill_incoming_buffers()`.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":30017,"byte_end":30093,"line_start":253,"line_end":253,"column_start":5,"column_end":81}},{"value":"/ - `Err(e)`: an I/O error occurred reading from the socked, details are in `e`","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":30098,"byte_end":30179,"line_start":254,"line_end":254,"column_start":5,"column_end":86}},{"value":"/   (this can be a \"wouldblock\" error, which just means that no message is available","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":30184,"byte_end":30270,"line_start":255,"line_end":255,"column_start":5,"column_end":91}},{"value":"/   to read)","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":30275,"byte_end":30289,"line_start":256,"line_end":256,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":32860,"byte_end":32873,"line_start":314,"line_end":314,"column_start":12,"column_end":25},"name":"read_messages","qualname":"<BufferedSocket>::read_messages","value":"pub fn read_messages<F1, F2>(&mut Self, F1, F2)\n-> NixResult<Result<usize, MessageParseError>> where F1: FnMut(u32, u16) ->\nOption<&'static [ArgumentType]>, F2: FnMut(Message) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Read and deserialize messages from the socket","sig":null,"attributes":[{"value":"/ Read and deserialize messages from the socket","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":31503,"byte_end":31552,"line_start":289,"line_end":289,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":31557,"byte_end":31560,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ This method requires two closures:","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":31565,"byte_end":31603,"line_start":291,"line_end":291,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":31608,"byte_end":31611,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ - The first one, given an object id and an opcode, must provide","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":31616,"byte_end":31683,"line_start":293,"line_end":293,"column_start":5,"column_end":72}},{"value":"/   the signature of the associated request/event, in the form of","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":31688,"byte_end":31755,"line_start":294,"line_end":294,"column_start":5,"column_end":72}},{"value":"/   a `&'static [ArgumentType]`. If it returns `None`, meaning that","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":31760,"byte_end":31829,"line_start":295,"line_end":295,"column_start":5,"column_end":74}},{"value":"/   the couple object/opcode does not exist, the parsing will be","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":31834,"byte_end":31900,"line_start":296,"line_end":296,"column_start":5,"column_end":71}},{"value":"/   prematurely interrupted and this method will return a","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":31905,"byte_end":31964,"line_start":297,"line_end":297,"column_start":5,"column_end":64}},{"value":"/   `MessageParseError::Malformed` error.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":31969,"byte_end":32012,"line_start":298,"line_end":298,"column_start":5,"column_end":48}},{"value":"/ - The second closure is charged to process the parsed message. If it","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":32017,"byte_end":32089,"line_start":299,"line_end":299,"column_start":5,"column_end":77}},{"value":"/   returns `false`, the iteration will be prematurely stopped.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":32094,"byte_end":32159,"line_start":300,"line_end":300,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":32164,"byte_end":32167,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ In both cases of early stopping, the remaining unused data will be left","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":32172,"byte_end":32247,"line_start":302,"line_end":302,"column_start":5,"column_end":80}},{"value":"/ in the buffers, and will start to be processed at the next call of this","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":32252,"byte_end":32327,"line_start":303,"line_end":303,"column_start":5,"column_end":80}},{"value":"/ method.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":32332,"byte_end":32343,"line_start":304,"line_end":304,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":32348,"byte_end":32351,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ There are 3 possibilities of return value:","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":32356,"byte_end":32402,"line_start":306,"line_end":306,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":32407,"byte_end":32410,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ - `Ok(Ok(n))`: no error occurred, `n` messages where processed","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":32415,"byte_end":32481,"line_start":308,"line_end":308,"column_start":5,"column_end":71}},{"value":"/ - `Ok(Err(MessageParseError::Malformed))`: a malformed message was encountered","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":32486,"byte_end":32568,"line_start":309,"line_end":309,"column_start":5,"column_end":87}},{"value":"/   (this is a protocol error and is supposed to be fatal to the connection).","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":32573,"byte_end":32652,"line_start":310,"line_end":310,"column_start":5,"column_end":84}},{"value":"/ - `Err(e)`: an I/O error occurred reading from the socked, details are in `e`","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":32657,"byte_end":32738,"line_start":311,"line_end":311,"column_start":5,"column_end":86}},{"value":"/   (this can be a \"wouldblock\" error, which just means that no message is available","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":32743,"byte_end":32829,"line_start":312,"line_end":312,"column_start":5,"column_end":91}},{"value":"/   to read)","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":32834,"byte_end":32848,"line_start":313,"line_end":313,"column_start":5,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":198},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"user_data","qualname":"::user_data","value":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","parent":null,"children":[{"krate":0,"index":199},{"krate":0,"index":202},{"krate":0,"index":205},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":212},{"krate":0,"index":215},{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":472},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":232},{"krate":0,"index":474},{"krate":0,"index":476},{"krate":0,"index":234},{"krate":0,"index":244},{"krate":0,"index":246}],"decl_id":null,"docs":" Various utilities used for other implementations\n","sig":null,"attributes":[{"value":"/ Various utilities used for other implementations","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":44127,"byte_end":44179,"line_start":1,"line_end":1,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":460},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":44460,"byte_end":44468,"line_start":14,"line_end":14,"column_start":12,"column_end":20},"name":"UserData","qualname":"::user_data::UserData","value":"UserData {  }","parent":null,"children":[{"krate":0,"index":461}],"decl_id":null,"docs":" A wrapper for user data, able to store any type, and correctly\n handling access from a wrong thread\n","sig":null,"attributes":[{"value":"/ A wrapper for user data, able to store any type, and correctly","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":44325,"byte_end":44391,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/ handling access from a wrong thread","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":44392,"byte_end":44431,"line_start":12,"line_end":12,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":44943,"byte_end":44946,"line_start":31,"line_end":31,"column_start":18,"column_end":21},"name":"new","qualname":"<UserData>::new","value":"pub const fn new() -> UserData","parent":null,"children":[],"decl_id":null,"docs":" Create a new UserData instance\n","sig":null,"attributes":[{"value":"/ Create a new UserData instance","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":44891,"byte_end":44925,"line_start":30,"line_end":30,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":45196,"byte_end":45199,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"set","qualname":"<UserData>::set","value":"pub fn set<T: Any + 'static, F: FnOnce() -> T>(&Self, F)","parent":null,"children":[],"decl_id":null,"docs":" Sets the UserData to a given value","sig":null,"attributes":[{"value":"/ Sets the UserData to a given value","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":45018,"byte_end":45056,"line_start":35,"line_end":35,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":45061,"byte_end":45064,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ The provided closure is called to init the UserData,","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":45069,"byte_end":45125,"line_start":37,"line_end":37,"column_start":5,"column_end":61}},{"value":"/ does nothing is the UserData had already been set.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":45130,"byte_end":45184,"line_start":38,"line_end":38,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":45598,"byte_end":45612,"line_start":49,"line_end":49,"column_start":12,"column_end":26},"name":"set_threadsafe","qualname":"<UserData>::set_threadsafe","value":"pub fn set_threadsafe<T: Any + Send + Sync + 'static, F: FnOnce() ->\nT>(&Self, F)","parent":null,"children":[],"decl_id":null,"docs":" Sets the UserData to a given threadsafe value","sig":null,"attributes":[{"value":"/ Sets the UserData to a given threadsafe value","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":45409,"byte_end":45458,"line_start":45,"line_end":45,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":45463,"byte_end":45466,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ The provided closure is called to init the UserData,","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":45471,"byte_end":45527,"line_start":47,"line_end":47,"column_start":5,"column_end":61}},{"value":"/ does nothing is the UserData had already been set.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":45532,"byte_end":45586,"line_start":48,"line_end":48,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":46116,"byte_end":46119,"line_start":60,"line_end":60,"column_start":12,"column_end":15},"name":"get","qualname":"<UserData>::get","value":"pub fn get<T: 'static>(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to access the wrapped user data","sig":null,"attributes":[{"value":"/ Attempt to access the wrapped user data","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":45766,"byte_end":45809,"line_start":53,"line_end":53,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":45814,"byte_end":45817,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ Will return `None` if either:","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":45822,"byte_end":45855,"line_start":55,"line_end":55,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":45860,"byte_end":45863,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ - The requested type `T` does not match the type used for construction","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":45868,"byte_end":45942,"line_start":57,"line_end":57,"column_start":5,"column_end":79}},{"value":"/ - This `UserData` has been created using the non-threadsafe variant and access","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":45947,"byte_end":46029,"line_start":58,"line_end":58,"column_start":5,"column_end":87}},{"value":"/   is attempted from an other thread than the one it was created on","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":46034,"byte_end":46104,"line_start":59,"line_end":59,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":474},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":47238,"byte_end":47249,"line_start":93,"line_end":93,"column_start":12,"column_end":23},"name":"UserDataMap","qualname":"::user_data::UserDataMap","value":"UserDataMap {  }","parent":null,"children":[{"krate":0,"index":475}],"decl_id":null,"docs":" A storage able to store several values of `UserData`\n of different types. It behaves similarly to a `TypeMap`.\n","sig":null,"attributes":[{"value":"/ A storage able to store several values of `UserData`","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":47092,"byte_end":47148,"line_start":90,"line_end":90,"column_start":1,"column_end":57}},{"value":"/ of different types. It behaves similarly to a `TypeMap`.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":47149,"byte_end":47209,"line_start":91,"line_end":91,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":47342,"byte_end":47345,"line_start":99,"line_end":99,"column_start":12,"column_end":15},"name":"new","qualname":"<UserDataMap>::new","value":"pub fn new() -> UserDataMap","parent":null,"children":[],"decl_id":null,"docs":" Create a new map\n","sig":null,"attributes":[{"value":"/ Create a new map","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":47310,"byte_end":47330,"line_start":98,"line_end":98,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":47626,"byte_end":47629,"line_start":107,"line_end":107,"column_start":12,"column_end":15},"name":"get","qualname":"<UserDataMap>::get","value":"pub fn get<T: 'static>(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to access the wrapped user data of a given type","sig":null,"attributes":[{"value":"/ Attempt to access the wrapped user data of a given type","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":47424,"byte_end":47483,"line_start":103,"line_end":103,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":47488,"byte_end":47491,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ Will return `None` if no value of type `T` is stored in this `UserDataMap`","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":47496,"byte_end":47574,"line_start":105,"line_end":105,"column_start":5,"column_end":83}},{"value":"/ and accessible from this thread","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":47579,"byte_end":47614,"line_start":106,"line_end":106,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":48342,"byte_end":48359,"line_start":125,"line_end":125,"column_start":12,"column_end":29},"name":"insert_if_missing","qualname":"<UserDataMap>::insert_if_missing","value":"pub fn insert_if_missing<T: 'static, F: FnOnce() -> T>(&Self, F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Insert a value in the map if it is not already there","sig":null,"attributes":[{"value":"/ Insert a value in the map if it is not already there","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":47839,"byte_end":47895,"line_start":116,"line_end":116,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":47900,"byte_end":47903,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ This is the non-threadsafe variant, the type you insert don't have to be","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":47908,"byte_end":47984,"line_start":118,"line_end":118,"column_start":5,"column_end":81}},{"value":"/ threadsafe, but they will not be visible from other threads (even if they are","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":47989,"byte_end":48070,"line_start":119,"line_end":119,"column_start":5,"column_end":86}},{"value":"/ actually threadsafe).","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":48075,"byte_end":48100,"line_start":120,"line_end":120,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":48105,"byte_end":48108,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ If the value does not already exists, the closure is called to create it and","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":48113,"byte_end":48193,"line_start":122,"line_end":122,"column_start":5,"column_end":85}},{"value":"/ this function returns `true`. If the value already exists, the closure is not","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":48198,"byte_end":48279,"line_start":123,"line_end":123,"column_start":5,"column_end":86}},{"value":"/ called, and this function returns `false`.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":48284,"byte_end":48330,"line_start":124,"line_end":124,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":49038,"byte_end":49066,"line_start":143,"line_end":143,"column_start":12,"column_end":40},"name":"insert_if_missing_threadsafe","qualname":"<UserDataMap>::insert_if_missing_threadsafe","value":"pub fn insert_if_missing_threadsafe<T: Send + Sync + 'static, F: FnOnce() ->\nT>(&Self, F) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Insert a value in the map if it is not already there","sig":null,"attributes":[{"value":"/ Insert a value in the map if it is not already there","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":48607,"byte_end":48663,"line_start":135,"line_end":135,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":48668,"byte_end":48671,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ This is the threadsafe variant, the type you insert must be threadsafe and will","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":48676,"byte_end":48759,"line_start":137,"line_end":137,"column_start":5,"column_end":88}},{"value":"/ be visible from all threads.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":48764,"byte_end":48796,"line_start":138,"line_end":138,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":48801,"byte_end":48804,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ If the value does not already exists, the closure is called to create it and","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":48809,"byte_end":48889,"line_start":140,"line_end":140,"column_start":5,"column_end":85}},{"value":"/ this function returns `true`. If the value already exists, the closure is not","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":48894,"byte_end":48975,"line_start":141,"line_end":141,"column_start":5,"column_end":86}},{"value":"/ called, and this function returns `false`.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":48980,"byte_end":49026,"line_start":142,"line_end":142,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":485},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":50001,"byte_end":50011,"line_start":184,"line_end":184,"column_start":16,"column_end":26},"name":"AppendList","qualname":"::user_data::list::AppendList","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":50607,"byte_end":50610,"line_start":205,"line_end":205,"column_start":16,"column_end":19},"name":"new","qualname":"<AppendList<T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":50686,"byte_end":50692,"line_start":209,"line_end":209,"column_start":16,"column_end":22},"name":"append","qualname":"<AppendList<T>>::append","value":"pub fn append(&Self, T)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":51450,"byte_end":51461,"line_start":234,"line_end":234,"column_start":16,"column_end":27},"name":"append_list","qualname":"<AppendList<T>>::append_list","value":"pub fn append_list(&Self, AppendList<T>)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":51647,"byte_end":51651,"line_start":240,"line_end":240,"column_start":16,"column_end":20},"name":"iter","qualname":"<AppendList<T>>::iter","value":"pub fn iter(&Self) -> AppendListIterator<, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":51752,"byte_end":51760,"line_start":244,"line_end":244,"column_start":16,"column_end":24},"name":"iter_mut","qualname":"<AppendList<T>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> AppendListMutIterator<, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":492},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":52558,"byte_end":52576,"line_start":274,"line_end":274,"column_start":16,"column_end":34},"name":"AppendListIterator","qualname":"::user_data::list::AppendListIterator","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":501},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":53063,"byte_end":53084,"line_start":293,"line_end":293,"column_start":16,"column_end":37},"name":"AppendListMutIterator","qualname":"::user_data::list::AppendListMutIterator","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":299},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"wire","qualname":"::wire","value":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","parent":null,"children":[{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":304},{"krate":0,"index":307},{"krate":0,"index":310},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":317},{"krate":0,"index":320},{"krate":0,"index":323},{"krate":0,"index":510},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":518},{"krate":0,"index":520},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":543},{"krate":0,"index":545},{"krate":0,"index":570},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":576},{"krate":0,"index":324},{"krate":0,"index":326},{"krate":0,"index":578},{"krate":0,"index":583},{"krate":0,"index":585},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":591},{"krate":0,"index":597},{"krate":0,"index":599},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":601},{"krate":0,"index":608},{"krate":0,"index":610},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":334},{"krate":0,"index":347},{"krate":0,"index":353},{"krate":0,"index":355},{"krate":0,"index":359}],"decl_id":null,"docs":" Types and routines used to manipulate arguments from the wire format\n","sig":null,"attributes":[{"value":"/ Types and routines used to manipulate arguments from the wire format","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":53900,"byte_end":53972,"line_start":1,"line_end":1,"column_start":1,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":510},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":54661,"byte_end":54672,"line_start":21,"line_end":21,"column_start":12,"column_end":23},"name":"MessageDesc","qualname":"::wire::MessageDesc","value":"MessageDesc { name, signature, since, destructor }","parent":null,"children":[{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514}],"decl_id":null,"docs":" Wire metadata of a given message\n","sig":null,"attributes":[{"value":"/ Wire metadata of a given message","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":54583,"byte_end":54619,"line_start":19,"line_end":19,"column_start":1,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":511},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":54712,"byte_end":54716,"line_start":23,"line_end":23,"column_start":9,"column_end":13},"name":"name","qualname":"::wire::MessageDesc::name","value":"&'static str","parent":{"krate":0,"index":510},"children":[],"decl_id":null,"docs":" Name of this message\n","sig":null,"attributes":[{"value":"/ Name of this message","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":54679,"byte_end":54703,"line_start":22,"line_end":22,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":512},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":54773,"byte_end":54782,"line_start":25,"line_end":25,"column_start":9,"column_end":18},"name":"signature","qualname":"::wire::MessageDesc::signature","value":"&'static [wire::ArgumentType]","parent":{"krate":0,"index":510},"children":[],"decl_id":null,"docs":" Signature of the message\n","sig":null,"attributes":[{"value":"/ Signature of the message","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":54736,"byte_end":54764,"line_start":24,"line_end":24,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":513},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":54867,"byte_end":54872,"line_start":27,"line_end":27,"column_start":9,"column_end":14},"name":"since","qualname":"::wire::MessageDesc::since","value":"u32","parent":{"krate":0,"index":510},"children":[],"decl_id":null,"docs":" Minimum required version of the interface\n","sig":null,"attributes":[{"value":"/ Minimum required version of the interface","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":54813,"byte_end":54858,"line_start":26,"line_end":26,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":514},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":54932,"byte_end":54942,"line_start":29,"line_end":29,"column_start":9,"column_end":19},"name":"destructor","qualname":"::wire::MessageDesc::destructor","value":"bool","parent":{"krate":0,"index":510},"children":[],"decl_id":null,"docs":" Whether this message is a destructor\n","sig":null,"attributes":[{"value":"/ Whether this message is a destructor","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":54883,"byte_end":54923,"line_start":28,"line_end":28,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":521},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55096,"byte_end":55099,"line_start":36,"line_end":36,"column_start":5,"column_end":8},"name":"Int","qualname":"::wire::ArgumentType::Int","value":"ArgumentType::Int","parent":{"krate":0,"index":520},"children":[],"decl_id":null,"docs":" i32\n","sig":null,"attributes":[{"value":"/ i32","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55084,"byte_end":55091,"line_start":35,"line_end":35,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":523},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55117,"byte_end":55121,"line_start":38,"line_end":38,"column_start":5,"column_end":9},"name":"Uint","qualname":"::wire::ArgumentType::Uint","value":"ArgumentType::Uint","parent":{"krate":0,"index":520},"children":[],"decl_id":null,"docs":" u32\n","sig":null,"attributes":[{"value":"/ u32","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55105,"byte_end":55112,"line_start":37,"line_end":37,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":525},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55164,"byte_end":55169,"line_start":40,"line_end":40,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::wire::ArgumentType::Fixed","value":"ArgumentType::Fixed","parent":{"krate":0,"index":520},"children":[],"decl_id":null,"docs":" fixed point, 1/256 precision\n","sig":null,"attributes":[{"value":"/ fixed point, 1/256 precision","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55127,"byte_end":55159,"line_start":39,"line_end":39,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":527},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55191,"byte_end":55194,"line_start":42,"line_end":42,"column_start":5,"column_end":8},"name":"Str","qualname":"::wire::ArgumentType::Str","value":"ArgumentType::Str","parent":{"krate":0,"index":520},"children":[],"decl_id":null,"docs":" CString\n","sig":null,"attributes":[{"value":"/ CString","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55175,"byte_end":55186,"line_start":41,"line_end":41,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":529},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55231,"byte_end":55237,"line_start":44,"line_end":44,"column_start":5,"column_end":11},"name":"Object","qualname":"::wire::ArgumentType::Object","value":"ArgumentType::Object","parent":{"krate":0,"index":520},"children":[],"decl_id":null,"docs":" id of a wayland object\n","sig":null,"attributes":[{"value":"/ id of a wayland object","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55200,"byte_end":55226,"line_start":43,"line_end":43,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":531},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55288,"byte_end":55293,"line_start":46,"line_end":46,"column_start":5,"column_end":10},"name":"NewId","qualname":"::wire::ArgumentType::NewId","value":"ArgumentType::NewId","parent":{"krate":0,"index":520},"children":[],"decl_id":null,"docs":" id of a newly created wayland object\n","sig":null,"attributes":[{"value":"/ id of a newly created wayland object","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55243,"byte_end":55283,"line_start":45,"line_end":45,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":533},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55315,"byte_end":55320,"line_start":48,"line_end":48,"column_start":5,"column_end":10},"name":"Array","qualname":"::wire::ArgumentType::Array","value":"ArgumentType::Array","parent":{"krate":0,"index":520},"children":[],"decl_id":null,"docs":" Vec<u8>\n","sig":null,"attributes":[{"value":"/ Vec<u8>","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55299,"byte_end":55310,"line_start":47,"line_end":47,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":535},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55340,"byte_end":55342,"line_start":50,"line_end":50,"column_start":5,"column_end":7},"name":"Fd","qualname":"::wire::ArgumentType::Fd","value":"ArgumentType::Fd","parent":{"krate":0,"index":520},"children":[],"decl_id":null,"docs":" RawFd\n","sig":null,"attributes":[{"value":"/ RawFd","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55326,"byte_end":55335,"line_start":49,"line_end":49,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":520},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55065,"byte_end":55077,"line_start":34,"line_end":34,"column_start":10,"column_end":22},"name":"ArgumentType","qualname":"::wire::ArgumentType","value":"pub enum ArgumentType { Int, Uint, Fixed, Str, Object, NewId, Array, Fd, }","parent":null,"children":[{"krate":0,"index":521},{"krate":0,"index":523},{"krate":0,"index":525},{"krate":0,"index":527},{"krate":0,"index":529},{"krate":0,"index":531},{"krate":0,"index":533},{"krate":0,"index":535}],"decl_id":null,"docs":" Enum of possible argument types as recognized by the wire\n","sig":null,"attributes":[{"value":"/ Enum of possible argument types as recognized by the wire","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":54953,"byte_end":55014,"line_start":32,"line_end":32,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":546},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55525,"byte_end":55528,"line_start":58,"line_end":58,"column_start":5,"column_end":8},"name":"Int","qualname":"::wire::Argument::Int","value":"Argument::Int(i32)","parent":{"krate":0,"index":545},"children":[],"decl_id":null,"docs":" i32\n","sig":null,"attributes":[{"value":"/ i32","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55513,"byte_end":55520,"line_start":57,"line_end":57,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":549},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55551,"byte_end":55555,"line_start":60,"line_end":60,"column_start":5,"column_end":9},"name":"Uint","qualname":"::wire::Argument::Uint","value":"Argument::Uint(u32)","parent":{"krate":0,"index":545},"children":[],"decl_id":null,"docs":" u32\n","sig":null,"attributes":[{"value":"/ u32","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55539,"byte_end":55546,"line_start":59,"line_end":59,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":552},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55603,"byte_end":55608,"line_start":62,"line_end":62,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::wire::Argument::Fixed","value":"Argument::Fixed(i32)","parent":{"krate":0,"index":545},"children":[],"decl_id":null,"docs":" fixed point, 1/256 precision\n","sig":null,"attributes":[{"value":"/ fixed point, 1/256 precision","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55566,"byte_end":55598,"line_start":61,"line_end":61,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":555},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55808,"byte_end":55811,"line_start":67,"line_end":67,"column_start":5,"column_end":8},"name":"Str","qualname":"::wire::Argument::Str","value":"Argument::Str(Box<CString>)","parent":{"krate":0,"index":545},"children":[],"decl_id":null,"docs":" CString","sig":null,"attributes":[{"value":"/ CString","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55619,"byte_end":55630,"line_start":63,"line_end":63,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55635,"byte_end":55638,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ The value is boxed to reduce the stack size of Argument. The performance","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55643,"byte_end":55719,"line_start":65,"line_end":65,"column_start":5,"column_end":81}},{"value":"/ impact is negligible as `string` arguments are pretty rare in the protocol.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55724,"byte_end":55803,"line_start":66,"line_end":66,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":558},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55862,"byte_end":55868,"line_start":69,"line_end":69,"column_start":5,"column_end":11},"name":"Object","qualname":"::wire::Argument::Object","value":"Argument::Object(u32)","parent":{"krate":0,"index":545},"children":[],"decl_id":null,"docs":" id of a wayland object\n","sig":null,"attributes":[{"value":"/ id of a wayland object","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55831,"byte_end":55857,"line_start":68,"line_end":68,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":561},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55924,"byte_end":55929,"line_start":71,"line_end":71,"column_start":5,"column_end":10},"name":"NewId","qualname":"::wire::Argument::NewId","value":"Argument::NewId(u32)","parent":{"krate":0,"index":545},"children":[],"decl_id":null,"docs":" id of a newly created wayland object\n","sig":null,"attributes":[{"value":"/ id of a newly created wayland object","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55879,"byte_end":55919,"line_start":70,"line_end":70,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":564},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":56128,"byte_end":56133,"line_start":76,"line_end":76,"column_start":5,"column_end":10},"name":"Array","qualname":"::wire::Argument::Array","value":"Argument::Array(Box<Vec<u8>>)","parent":{"krate":0,"index":545},"children":[],"decl_id":null,"docs":" Vec<u8>","sig":null,"attributes":[{"value":"/ Vec<u8>","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55940,"byte_end":55951,"line_start":72,"line_end":72,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55956,"byte_end":55959,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ The value is boxed to reduce the stack size of Argument. The performance","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55964,"byte_end":56040,"line_start":74,"line_end":74,"column_start":5,"column_end":81}},{"value":"/ impact is negligible as `array` arguments are pretty rare in the protocol.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":56045,"byte_end":56123,"line_start":75,"line_end":75,"column_start":5,"column_end":83}}]},{"kind":"TupleVariant","id":{"krate":0,"index":567},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":56167,"byte_end":56169,"line_start":78,"line_end":78,"column_start":5,"column_end":7},"name":"Fd","qualname":"::wire::Argument::Fd","value":"Argument::Fd(RawFd)","parent":{"krate":0,"index":545},"children":[],"decl_id":null,"docs":" RawFd\n","sig":null,"attributes":[{"value":"/ RawFd","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":56153,"byte_end":56162,"line_start":77,"line_end":77,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":545},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55498,"byte_end":55506,"line_start":56,"line_end":56,"column_start":10,"column_end":18},"name":"Argument","qualname":"::wire::Argument","value":"pub enum Argument {\n    Int(i32),\n    Uint(u32),\n    Fixed(i32),\n    Str(Box<CString>),\n    Object(u32),\n    NewId(u32),\n    Array(Box<Vec<u8>>),\n    Fd(RawFd),\n}","parent":null,"children":[{"krate":0,"index":546},{"krate":0,"index":549},{"krate":0,"index":552},{"krate":0,"index":555},{"krate":0,"index":558},{"krate":0,"index":561},{"krate":0,"index":564},{"krate":0,"index":567}],"decl_id":null,"docs":" Enum of possible argument as recognized by the wire, including values\n","sig":null,"attributes":[{"value":"/ Enum of possible argument as recognized by the wire, including values","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55347,"byte_end":55420,"line_start":53,"line_end":53,"column_start":1,"column_end":74}},{"value":"allow(clippy :: box_collection)","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":55456,"byte_end":55488,"line_start":55,"line_end":55,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":56263,"byte_end":56271,"line_start":83,"line_end":83,"column_start":12,"column_end":20},"name":"get_type","qualname":"<Argument>::get_type","value":"pub fn get_type(&Self) -> ArgumentType","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the type of a given argument instance\n","sig":null,"attributes":[{"value":"/ Retrieve the type of a given argument instance","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":56201,"byte_end":56251,"line_start":82,"line_end":82,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":578},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":57473,"byte_end":57480,"line_start":114,"line_end":114,"column_start":12,"column_end":19},"name":"Message","qualname":"::wire::Message","value":"Message { sender_id, opcode, args }","parent":null,"children":[{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581}],"decl_id":null,"docs":" A wire message\n","sig":null,"attributes":[{"value":"/ A wire message","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":57408,"byte_end":57426,"line_start":112,"line_end":112,"column_start":1,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":579},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":57537,"byte_end":57546,"line_start":116,"line_end":116,"column_start":9,"column_end":18},"name":"sender_id","qualname":"::wire::Message::sender_id","value":"u32","parent":{"krate":0,"index":578},"children":[],"decl_id":null,"docs":" ID of the object sending this message\n","sig":null,"attributes":[{"value":"/ ID of the object sending this message","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":57487,"byte_end":57528,"line_start":115,"line_end":115,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":580},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":57591,"byte_end":57597,"line_start":118,"line_end":118,"column_start":9,"column_end":15},"name":"opcode","qualname":"::wire::Message::opcode","value":"u16","parent":{"krate":0,"index":578},"children":[],"decl_id":null,"docs":" Opcode of the message\n","sig":null,"attributes":[{"value":"/ Opcode of the message","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":57557,"byte_end":57582,"line_start":117,"line_end":117,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":581},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":57645,"byte_end":57649,"line_start":120,"line_end":120,"column_start":9,"column_end":13},"name":"args","qualname":"::wire::Message::args","value":"smallvec::SmallVec<[wire::Argument; _]>","parent":{"krate":0,"index":578},"children":[],"decl_id":null,"docs":" Arguments of the message\n","sig":null,"attributes":[{"value":"/ Arguments of the message","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":57608,"byte_end":57636,"line_start":119,"line_end":119,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":592},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":57875,"byte_end":57889,"line_start":127,"line_end":127,"column_start":5,"column_end":19},"name":"BufferTooSmall","qualname":"::wire::MessageWriteError::BufferTooSmall","value":"MessageWriteError::BufferTooSmall","parent":{"krate":0,"index":591},"children":[],"decl_id":null,"docs":" The buffer is too small to hold the message contents\n","sig":null,"attributes":[{"value":"/ The buffer is too small to hold the message contents","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":57814,"byte_end":57870,"line_start":126,"line_end":126,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":594},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":57954,"byte_end":57965,"line_start":129,"line_end":129,"column_start":5,"column_end":16},"name":"DupFdFailed","qualname":"::wire::MessageWriteError::DupFdFailed","value":"MessageWriteError::DupFdFailed(::nix::Error)","parent":{"krate":0,"index":591},"children":[],"decl_id":null,"docs":" The message contains a FD that could not be dup-ed\n","sig":null,"attributes":[{"value":"/ The message contains a FD that could not be dup-ed","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":57895,"byte_end":57949,"line_start":128,"line_end":128,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":591},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":57790,"byte_end":57807,"line_start":125,"line_end":125,"column_start":10,"column_end":27},"name":"MessageWriteError","qualname":"::wire::MessageWriteError","value":"pub enum MessageWriteError { BufferTooSmall, DupFdFailed(::nix::Error), }","parent":null,"children":[{"krate":0,"index":592},{"krate":0,"index":594}],"decl_id":null,"docs":" Error generated when trying to serialize a message into buffers\n","sig":null,"attributes":[{"value":"/ Error generated when trying to serialize a message into buffers","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":57689,"byte_end":57756,"line_start":123,"line_end":123,"column_start":1,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":602},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":58712,"byte_end":58721,"line_start":151,"line_end":151,"column_start":5,"column_end":14},"name":"MissingFD","qualname":"::wire::MessageParseError::MissingFD","value":"MessageParseError::MissingFD","parent":{"krate":0,"index":601},"children":[],"decl_id":null,"docs":" The message references a FD but the buffer FD is empty\n","sig":null,"attributes":[{"value":"/ The message references a FD but the buffer FD is empty","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":58649,"byte_end":58707,"line_start":150,"line_end":150,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":604},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":58782,"byte_end":58793,"line_start":153,"line_end":153,"column_start":5,"column_end":16},"name":"MissingData","qualname":"::wire::MessageParseError::MissingData","value":"MessageParseError::MissingData","parent":{"krate":0,"index":601},"children":[],"decl_id":null,"docs":" More data is needed to deserialize the message\n","sig":null,"attributes":[{"value":"/ More data is needed to deserialize the message","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":58727,"byte_end":58777,"line_start":152,"line_end":152,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":606},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":58853,"byte_end":58862,"line_start":155,"line_end":155,"column_start":5,"column_end":14},"name":"Malformed","qualname":"::wire::MessageParseError::Malformed","value":"MessageParseError::Malformed","parent":{"krate":0,"index":601},"children":[],"decl_id":null,"docs":" The message is malformed and cannot be parsed\n","sig":null,"attributes":[{"value":"/ The message is malformed and cannot be parsed","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":58799,"byte_end":58848,"line_start":154,"line_end":154,"column_start":5,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":601},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":58625,"byte_end":58642,"line_start":149,"line_end":149,"column_start":10,"column_end":27},"name":"MessageParseError","qualname":"::wire::MessageParseError","value":"pub enum MessageParseError { MissingFD, MissingData, Malformed, }","parent":null,"children":[{"krate":0,"index":602},{"krate":0,"index":604},{"krate":0,"index":606}],"decl_id":null,"docs":" Error generated when trying to deserialize a message from buffers\n","sig":null,"attributes":[{"value":"/ Error generated when trying to deserialize a message from buffers","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":58522,"byte_end":58591,"line_start":147,"line_end":147,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":59745,"byte_end":59761,"line_start":182,"line_end":182,"column_start":12,"column_end":28},"name":"write_to_buffers","qualname":"<Message>::write_to_buffers","value":"pub fn write_to_buffers(&Self, &mut [u32], &mut [RawFd])\n-> Result<(usize, usize), MessageWriteError>","parent":null,"children":[],"decl_id":null,"docs":" Serialize the contents of this message into provided buffers","sig":null,"attributes":[{"value":"/ Serialize the contents of this message into provided buffers","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":59531,"byte_end":59595,"line_start":177,"line_end":177,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":59600,"byte_end":59603,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ Returns the number of elements written in each buffer","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":59608,"byte_end":59665,"line_start":179,"line_end":179,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":59670,"byte_end":59673,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ Any serialized Fd will be `dup()`-ed in the process","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":59678,"byte_end":59733,"line_start":181,"line_end":181,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":63549,"byte_end":63557,"line_start":273,"line_end":273,"column_start":12,"column_end":20},"name":"from_raw","qualname":"<Message>::from_raw","value":"pub fn from_raw<'a, 'b>(&'a [u32], &[ArgumentType], &'b [RawFd])\n-> Result<(Message, &'a [u32], &'b [RawFd]), MessageParseError>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to parse a single wayland message with the given signature.","sig":null,"attributes":[{"value":"/ Attempts to parse a single wayland message with the given signature.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":63181,"byte_end":63253,"line_start":266,"line_end":266,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":63258,"byte_end":63261,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ If the buffers contains several messages, only the first one will be parsed,","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":63266,"byte_end":63346,"line_start":268,"line_end":268,"column_start":5,"column_end":85}},{"value":"/ and the unused tail of the buffers is returned. If a single message was present,","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":63351,"byte_end":63435,"line_start":269,"line_end":269,"column_start":5,"column_end":89}},{"value":"/ the returned slices should thus be empty.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":63440,"byte_end":63485,"line_start":270,"line_end":270,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":63490,"byte_end":63493,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ Errors if the message is malformed.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":63498,"byte_end":63537,"line_start":272,"line_end":272,"column_start":5,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":347},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":67103,"byte_end":67117,"line_start":359,"line_end":359,"column_start":8,"column_end":22},"name":"dup_fd_cloexec","qualname":"::wire::dup_fd_cloexec","value":"pub fn dup_fd_cloexec(RawFd) -> NixResult<RawFd>","parent":null,"children":[],"decl_id":null,"docs":" Duplicate a `RawFd` and set the CLOEXEC flag on the copy\n","sig":null,"attributes":[{"value":"/ Duplicate a `RawFd` and set the CLOEXEC flag on the copy","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":67035,"byte_end":67095,"line_start":358,"line_end":358,"column_start":1,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":367},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":1310,"byte_end":1322,"line_start":40,"line_end":40,"column_start":11,"column_end":23},"name":"MessageGroup","qualname":"::MessageGroup","value":"MessageGroup: Sized","parent":null,"children":[{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378}],"decl_id":null,"docs":" A group of messages","sig":null,"attributes":[{"value":"/ A group of messages","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":1015,"byte_end":1038,"line_start":33,"line_end":33,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":1039,"byte_end":1042,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ This represents a group of message that can be serialized on the protocol wire.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":1043,"byte_end":1126,"line_start":35,"line_end":35,"column_start":1,"column_end":84}},{"value":"/ Typically the set of events or requests of a single interface.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":1127,"byte_end":1193,"line_start":36,"line_end":36,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":1194,"byte_end":1197,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait are supposed to be","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":1198,"byte_end":1250,"line_start":38,"line_end":38,"column_start":1,"column_end":53}},{"value":"/ generated using the `wayland-scanner` crate.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":1251,"byte_end":1299,"line_start":39,"line_end":39,"column_start":1,"column_end":49}}]},{"kind":"Const","id":{"krate":0,"index":368},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":1391,"byte_end":1399,"line_start":42,"line_end":42,"column_start":11,"column_end":19},"name":"MESSAGES","qualname":"::MessageGroup::MESSAGES","value":"&'static [wire::MessageDesc]","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Wire representation of this MessageGroup\n","sig":null,"attributes":[{"value":"/ Wire representation of this MessageGroup","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":1336,"byte_end":1380,"line_start":41,"line_end":41,"column_start":5,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":369},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":1572,"byte_end":1575,"line_start":45,"line_end":45,"column_start":10,"column_end":13},"name":"Map","qualname":"::MessageGroup::Map","value":"type Map;","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" The wrapper type for ObjectMap allowing the mapping of Object and\n NewId arguments to the object map during parsing.\n","sig":null,"attributes":[{"value":"/ The wrapper type for ObjectMap allowing the mapping of Object and","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":1435,"byte_end":1504,"line_start":43,"line_end":43,"column_start":5,"column_end":74}},{"value":"/ NewId arguments to the object map during parsing.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":1509,"byte_end":1562,"line_start":44,"line_end":44,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":1619,"byte_end":1625,"line_start":47,"line_end":47,"column_start":8,"column_end":14},"name":"opcode","qualname":"::MessageGroup::opcode","value":"pub fn opcode(&Self) -> u16","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" The opcode of this message\n","sig":null,"attributes":[{"value":"/ The opcode of this message","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":1581,"byte_end":1611,"line_start":46,"line_end":46,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":1787,"byte_end":1800,"line_start":51,"line_end":51,"column_start":8,"column_end":21},"name":"is_destructor","qualname":"::MessageGroup::is_destructor","value":"pub fn is_destructor(&Self) -> bool","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Whether this message is a destructor","sig":null,"attributes":[{"value":"/ Whether this message is a destructor","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":1645,"byte_end":1685,"line_start":48,"line_end":48,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":1690,"byte_end":1693,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ If it is, once send or receive the associated object cannot be used any more.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":1698,"byte_end":1779,"line_start":50,"line_end":50,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":1889,"byte_end":1894,"line_start":53,"line_end":53,"column_start":8,"column_end":13},"name":"since","qualname":"::MessageGroup::since","value":"pub fn since(&Self) -> u32","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" The minimal object version for which this message exists\n","sig":null,"attributes":[{"value":"/ The minimal object version for which this message exists","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":1821,"byte_end":1881,"line_start":52,"line_end":52,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":1989,"byte_end":1994,"line_start":55,"line_end":55,"column_start":8,"column_end":13},"name":"child","qualname":"::MessageGroup::child","value":"pub fn child<Meta: self::map::ObjectMetadata>(u16, u32, &Meta)\n-> Option<crate::map::Object<Meta>>","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Retrieve the child `Object` associated with this message if any\n","sig":null,"attributes":[{"value":"/ Retrieve the child `Object` associated with this message if any","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":1914,"byte_end":1981,"line_start":54,"line_end":54,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":2315,"byte_end":2323,"line_start":63,"line_end":63,"column_start":8,"column_end":16},"name":"from_raw","qualname":"::MessageGroup::from_raw","value":"pub fn from_raw(wire::Message, &mut Self::Map) -> Result<Self, ()>","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Construct a message from its raw representation\n","sig":null,"attributes":[{"value":"/ Construct a message from its raw representation","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":2140,"byte_end":2191,"line_start":60,"line_end":60,"column_start":5,"column_end":56}},{"value":"allow(clippy :: result_unit_err)","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":2274,"byte_end":2307,"line_start":62,"line_end":62,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":2447,"byte_end":2455,"line_start":65,"line_end":65,"column_start":8,"column_end":16},"name":"into_raw","qualname":"::MessageGroup::into_raw","value":"pub fn into_raw(Self, u32) -> wire::Message","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Turn this message into its raw representation\n","sig":null,"attributes":[{"value":"/ Turn this message into its raw representation","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":2390,"byte_end":2439,"line_start":64,"line_end":64,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":2832,"byte_end":2842,"line_start":74,"line_end":74,"column_start":15,"column_end":25},"name":"from_raw_c","qualname":"::MessageGroup::from_raw_c","value":"pub unsafe fn from_raw_c(*mut c_void, u32, *const syscom::wl_argument)\n-> Result<Self, ()>","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Construct a message of this group from its C representation","sig":null,"attributes":[{"value":"/ Construct a message of this group from its C representation","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":2498,"byte_end":2561,"line_start":66,"line_end":66,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":2566,"byte_end":2569,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":2574,"byte_end":2586,"line_start":68,"line_end":68,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":2591,"byte_end":2594,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ The pointers provided to this function must all be valid pointers from","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":2599,"byte_end":2673,"line_start":70,"line_end":70,"column_start":5,"column_end":79}},{"value":"/ `libwayland-client`","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":2678,"byte_end":2701,"line_start":71,"line_end":71,"column_start":5,"column_end":28}},{"value":"allow(clippy :: result_unit_err)","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":2784,"byte_end":2817,"line_start":73,"line_end":73,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":3244,"byte_end":3255,"line_start":85,"line_end":85,"column_start":8,"column_end":19},"name":"as_raw_c_in","qualname":"::MessageGroup::as_raw_c_in","value":"pub fn as_raw_c_in<F, T>(Self, F) -> T where\nF: FnOnce(u32, &mut [syscom::wl_argument]) -> T","parent":{"krate":0,"index":367},"children":[],"decl_id":null,"docs":" Build a C representation of this message","sig":null,"attributes":[{"value":"/ Build a C representation of this message","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":2964,"byte_end":3008,"line_start":79,"line_end":79,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":3013,"byte_end":3016,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ It can only be accessed from the provided closure, and this consumes","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":3021,"byte_end":3093,"line_start":81,"line_end":81,"column_start":5,"column_end":77}},{"value":"/ the message.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":3098,"byte_end":3114,"line_start":82,"line_end":82,"column_start":5,"column_end":21}},{"value":"allow(clippy :: wrong_self_convention)","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":3197,"byte_end":3236,"line_start":84,"line_end":84,"column_start":5,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":381},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":3508,"byte_end":3517,"line_start":94,"line_end":94,"column_start":11,"column_end":20},"name":"Interface","qualname":"::Interface","value":"Interface: 'static","parent":null,"children":[{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386}],"decl_id":null,"docs":" The description of a wayland interface","sig":null,"attributes":[{"value":"/ The description of a wayland interface","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":3349,"byte_end":3391,"line_start":90,"line_end":90,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":3392,"byte_end":3395,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait are supposed to be","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":3396,"byte_end":3448,"line_start":92,"line_end":92,"column_start":1,"column_end":53}},{"value":"/ generated using the `wayland-scanner` crate.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":3449,"byte_end":3497,"line_start":93,"line_end":93,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":382},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":3659,"byte_end":3666,"line_start":98,"line_end":98,"column_start":10,"column_end":17},"name":"Request","qualname":"::Interface::Request","value":"type Request: MessageGroup + 'static;","parent":{"krate":0,"index":381},"children":[],"decl_id":null,"docs":" Set of requests associated to this interface","sig":null,"attributes":[{"value":"/ Set of requests associated to this interface","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":3533,"byte_end":3581,"line_start":95,"line_end":95,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":3586,"byte_end":3589,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ Requests are messages from the client to the server","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":3594,"byte_end":3649,"line_start":97,"line_end":97,"column_start":5,"column_end":60}}]},{"kind":"Type","id":{"krate":0,"index":383},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":3818,"byte_end":3823,"line_start":102,"line_end":102,"column_start":10,"column_end":15},"name":"Event","qualname":"::Interface::Event","value":"type Event: MessageGroup + 'static;","parent":{"krate":0,"index":381},"children":[],"decl_id":null,"docs":" Set of events associated to this interface","sig":null,"attributes":[{"value":"/ Set of events associated to this interface","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":3696,"byte_end":3742,"line_start":99,"line_end":99,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":3747,"byte_end":3750,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ Events are messages from the server to the client","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":3755,"byte_end":3808,"line_start":101,"line_end":101,"column_start":5,"column_end":58}}]},{"kind":"Const","id":{"krate":0,"index":384},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":3890,"byte_end":3894,"line_start":104,"line_end":104,"column_start":11,"column_end":15},"name":"NAME","qualname":"::Interface::NAME","value":"&'static str","parent":{"krate":0,"index":381},"children":[],"decl_id":null,"docs":" Name of this interface\n","sig":null,"attributes":[{"value":"/ Name of this interface","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":3853,"byte_end":3879,"line_start":103,"line_end":103,"column_start":5,"column_end":31}}]},{"kind":"Const","id":{"krate":0,"index":385},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":4427,"byte_end":4434,"line_start":114,"line_end":114,"column_start":11,"column_end":18},"name":"VERSION","qualname":"::Interface::VERSION","value":"u32","parent":{"krate":0,"index":381},"children":[],"decl_id":null,"docs":" Maximum supported version of this interface","sig":null,"attributes":[{"value":"/ Maximum supported version of this interface","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":3914,"byte_end":3961,"line_start":105,"line_end":105,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":3966,"byte_end":3969,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ This is the maximum version supported by the protocol specification currently","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":3974,"byte_end":4055,"line_start":107,"line_end":107,"column_start":5,"column_end":86}},{"value":"/ used by this library, and should not be used as-is in your code, as a version","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":4060,"byte_end":4141,"line_start":108,"line_end":108,"column_start":5,"column_end":86}},{"value":"/ change can subtly change the behavior of some objects.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":4146,"byte_end":4204,"line_start":109,"line_end":109,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":4209,"byte_end":4212,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ Server are supposed to be able to handle all versions from 1 to the one they","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":4217,"byte_end":4297,"line_start":111,"line_end":111,"column_start":5,"column_end":85}},{"value":"/ advertise through the registry, and clients can choose any version among the","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":4302,"byte_end":4382,"line_start":112,"line_end":112,"column_start":5,"column_end":85}},{"value":"/ ones the server supports.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":4387,"byte_end":4416,"line_start":113,"line_end":113,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":4506,"byte_end":4517,"line_start":116,"line_end":116,"column_start":8,"column_end":19},"name":"c_interface","qualname":"::Interface::c_interface","value":"pub fn c_interface() -> *const syscom::wl_interface","parent":{"krate":0,"index":381},"children":[],"decl_id":null,"docs":" Pointer to the C representation of this interface\n","sig":null,"attributes":[{"value":"/ Pointer to the C representation of this interface","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":4445,"byte_end":4498,"line_start":115,"line_end":115,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":612},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":4644,"byte_end":4653,"line_start":121,"line_end":121,"column_start":10,"column_end":19},"name":"NoMessage","qualname":"::NoMessage","value":"pub enum NoMessage { }","parent":null,"children":[],"decl_id":null,"docs":" An empty enum representing a MessageGroup with no messages\n","sig":null,"attributes":[{"value":"/ An empty enum representing a MessageGroup with no messages","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":4555,"byte_end":4617,"line_start":119,"line_end":119,"column_start":1,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":615},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":5814,"byte_end":5825,"line_start":166,"line_end":166,"column_start":12,"column_end":23},"name":"ThreadGuard","qualname":"::ThreadGuard","value":"ThreadGuard {  }","parent":null,"children":[{"krate":0,"index":617},{"krate":0,"index":618}],"decl_id":null,"docs":" Stores a value in a threadafe container that\n only lets you access it from its owning thread","sig":null,"attributes":[{"value":"/ Stores a value in a threadafe container that","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":5584,"byte_end":5632,"line_start":160,"line_end":160,"column_start":1,"column_end":49}},{"value":"/ only lets you access it from its owning thread","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":5633,"byte_end":5683,"line_start":161,"line_end":161,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":5684,"byte_end":5687,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ If the ThreadGuard is dropped from the wrong thread,","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":5688,"byte_end":5744,"line_start":163,"line_end":163,"column_start":1,"column_end":57}},{"value":"/ the underlying value will be leaked.","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":5745,"byte_end":5785,"line_start":164,"line_end":164,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":5990,"byte_end":5993,"line_start":173,"line_end":173,"column_start":12,"column_end":15},"name":"new","qualname":"<ThreadGuard<T>>::new","value":"pub fn new(T) -> ThreadGuard<T>","parent":null,"children":[],"decl_id":null,"docs":" Create a new ThreadGuard wrapper\n","sig":null,"attributes":[{"value":"/ Create a new ThreadGuard wrapper","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":5942,"byte_end":5978,"line_start":172,"line_end":172,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":6261,"byte_end":6264,"line_start":182,"line_end":182,"column_start":12,"column_end":15},"name":"get","qualname":"<ThreadGuard<T>>::get","value":"pub fn get(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Access the underlying value","sig":null,"attributes":[{"value":"/ Access the underlying value","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":6167,"byte_end":6198,"line_start":179,"line_end":179,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":6203,"byte_end":6206,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ Panics if done on the wrong thread","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":6211,"byte_end":6249,"line_start":181,"line_end":181,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":6492,"byte_end":6499,"line_start":189,"line_end":189,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ThreadGuard<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Mutably access the underlying value","sig":null,"attributes":[{"value":"/ Mutably access the underlying value","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":6390,"byte_end":6429,"line_start":186,"line_end":186,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":6434,"byte_end":6437,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ Panics if done on the wrong thread","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":6442,"byte_end":6480,"line_start":188,"line_end":188,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":6759,"byte_end":6766,"line_start":197,"line_end":197,"column_start":12,"column_end":19},"name":"try_get","qualname":"<ThreadGuard<T>>::try_get","value":"pub fn try_get(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Try to access the underlying value","sig":null,"attributes":[{"value":"/ Try to access the underlying value","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":6650,"byte_end":6688,"line_start":194,"line_end":194,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":6693,"byte_end":6696,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if done on the wrong thread","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":6701,"byte_end":6747,"line_start":196,"line_end":196,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":7048,"byte_end":7059,"line_start":208,"line_end":208,"column_start":12,"column_end":23},"name":"try_get_mut","qualname":"<ThreadGuard<T>>::try_get_mut","value":"pub fn try_get_mut(&mut Self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Try to mutably access the underlying value","sig":null,"attributes":[{"value":"/ Try to mutably access the underlying value","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":6931,"byte_end":6977,"line_start":205,"line_end":205,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":6982,"byte_end":6985,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if done on the wrong thread","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":6990,"byte_end":7036,"line_start":207,"line_end":207,"column_start":5,"column_end":51}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":10090,"byte_end":10102,"line_start":19,"line_end":19,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":10244,"byte_end":10256,"line_start":25,"line_end":25,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":11995,"byte_end":12001,"line_start":76,"line_end":76,"column_start":46,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":12187,"byte_end":12193,"line_start":82,"line_end":82,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":12296,"byte_end":12302,"line_start":88,"line_end":88,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":14736,"byte_end":14742,"line_start":43,"line_end":43,"column_start":66,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":15138,"byte_end":15144,"line_start":55,"line_end":55,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":17321,"byte_end":17330,"line_start":119,"line_end":119,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":22307,"byte_end":22313,"line_start":27,"line_end":27,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":24549,"byte_end":24555,"line_start":86,"line_end":86,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":24655,"byte_end":24661,"line_start":92,"line_end":92,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":24743,"byte_end":24749,"line_start":98,"line_end":98,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":24827,"byte_end":24833,"line_start":104,"line_end":104,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":25235,"byte_end":25249,"line_start":125,"line_end":125,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":35096,"byte_end":35102,"line_start":390,"line_end":390,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":44825,"byte_end":44833,"line_start":26,"line_end":26,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":44858,"byte_end":44866,"line_start":27,"line_end":27,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":44876,"byte_end":44884,"line_start":29,"line_end":29,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":226},{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":46676,"byte_end":46684,"line_start":76,"line_end":76,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":47292,"byte_end":47303,"line_start":97,"line_end":97,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":49377,"byte_end":49388,"line_start":157,"line_end":157,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":50049,"byte_end":50059,"line_start":186,"line_end":186,"column_start":13,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":52367,"byte_end":52377,"line_start":267,"line_end":267,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":52647,"byte_end":52665,"line_start":276,"line_end":276,"column_start":34,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":292},{"krate":0,"index":293}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":53159,"byte_end":53180,"line_start":295,"line_end":295,"column_start":34,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":297},{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":56186,"byte_end":56194,"line_start":81,"line_end":81,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":56791,"byte_end":56799,"line_start":97,"line_end":97,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":58011,"byte_end":58028,"line_start":132,"line_end":132,"column_start":28,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":58060,"byte_end":58077,"line_start":134,"line_end":134,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":58894,"byte_end":58911,"line_start":158,"line_end":158,"column_start":28,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":58943,"byte_end":58960,"line_start":160,"line_end":160,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":333}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":59517,"byte_end":59524,"line_start":176,"line_end":176,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":335},{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":68291,"byte_end":68298,"line_start":396,"line_end":396,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":68513,"byte_end":68520,"line_start":408,"line_end":408,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":4711,"byte_end":4720,"line_start":124,"line_end":124,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":5921,"byte_end":5932,"line_start":171,"line_end":171,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":6146,"byte_end":6157,"line_start":178,"line_end":178,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":7259,"byte_end":7270,"line_start":217,"line_end":217,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":7619,"byte_end":7630,"line_start":227,"line_end":227,"column_start":33,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":7669,"byte_end":7680,"line_start":228,"line_end":228,"column_start":33,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":900,"byte_end":905,"line_start":24,"line_end":24,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":10}},{"kind":"Mod","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":915,"byte_end":921,"line_start":25,"line_end":25,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":25}},{"kind":"Mod","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":931,"byte_end":934,"line_start":26,"line_end":26,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":70}},{"kind":"Mod","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":944,"byte_end":950,"line_start":27,"line_end":27,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":121}},{"kind":"Mod","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":960,"byte_end":969,"line_start":28,"line_end":28,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":198}},{"kind":"Mod","span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":979,"byte_end":983,"line_start":29,"line_end":29,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":299}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":10090,"byte_end":10102,"line_start":19,"line_end":19,"column_start":30,"column_end":42},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":36},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":10244,"byte_end":10256,"line_start":25,"line_end":25,"column_start":10,"column_end":22},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":36},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":11995,"byte_end":12001,"line_start":76,"line_end":76,"column_start":46,"column_end":52},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":56},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":12187,"byte_end":12193,"line_start":82,"line_end":82,"column_start":19,"column_end":25},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":56},"to":{"krate":2,"index":2679}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/filter.rs","byte_start":12296,"byte_end":12302,"line_start":88,"line_end":88,"column_start":9,"column_end":15},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":56},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":13503,"byte_end":13508,"line_start":11,"line_end":11,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":2679},"to":{"krate":0,"index":85}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":14736,"byte_end":14742,"line_start":43,"line_end":43,"column_start":66,"column_end":72},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":417},"to":{"krate":2,"index":9678}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":15138,"byte_end":15144,"line_start":55,"line_end":55,"column_start":28,"column_end":34},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":417},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/map.rs","byte_start":17321,"byte_end":17330,"line_start":119,"line_end":119,"column_start":28,"column_end":37},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":429},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":22307,"byte_end":22313,"line_start":27,"line_end":27,"column_start":6,"column_end":12},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":439},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":24549,"byte_end":24555,"line_start":86,"line_end":86,"column_start":20,"column_end":26},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":439},"to":{"krate":1,"index":6963}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":24655,"byte_end":24661,"line_start":92,"line_end":92,"column_start":18,"column_end":24},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":439},"to":{"krate":1,"index":6961}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":24743,"byte_end":24749,"line_start":98,"line_end":98,"column_start":20,"column_end":26},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":439},"to":{"krate":1,"index":6965}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":24827,"byte_end":24833,"line_start":104,"line_end":104,"column_start":15,"column_end":21},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":439},"to":{"krate":2,"index":3300}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":25235,"byte_end":25249,"line_start":125,"line_end":125,"column_start":6,"column_end":20},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":444},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/socket.rs","byte_start":35096,"byte_end":35102,"line_start":390,"line_end":390,"column_start":25,"column_end":31},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":452},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":44825,"byte_end":44833,"line_start":26,"line_end":26,"column_start":22,"column_end":30},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":460},"to":{"krate":2,"index":3057}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":44858,"byte_end":44866,"line_start":27,"line_end":27,"column_start":22,"column_end":30},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":460},"to":{"krate":2,"index":3069}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":44876,"byte_end":44884,"line_start":29,"line_end":29,"column_start":6,"column_end":14},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":460},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":46676,"byte_end":46684,"line_start":76,"line_end":76,"column_start":15,"column_end":23},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":460},"to":{"krate":2,"index":3300}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":47292,"byte_end":47303,"line_start":97,"line_end":97,"column_start":6,"column_end":17},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":474},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":49377,"byte_end":49388,"line_start":157,"line_end":157,"column_start":18,"column_end":29},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":474},"to":{"krate":2,"index":3035}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":50049,"byte_end":50059,"line_start":186,"line_end":186,"column_start":13,"column_end":23},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":485},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":52367,"byte_end":52377,"line_start":267,"line_end":267,"column_start":22,"column_end":32},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":485},"to":{"krate":2,"index":3300}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":52647,"byte_end":52665,"line_start":276,"line_end":276,"column_start":34,"column_end":52},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":492},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/user_data.rs","byte_start":53159,"byte_end":53180,"line_start":295,"line_end":295,"column_start":34,"column_end":55},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":501},"to":{"krate":2,"index":7978}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":56186,"byte_end":56194,"line_start":81,"line_end":81,"column_start":6,"column_end":14},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":545},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":56791,"byte_end":56799,"line_start":97,"line_end":97,"column_start":28,"column_end":36},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":545},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":58011,"byte_end":58028,"line_start":132,"line_end":132,"column_start":28,"column_end":45},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":591},"to":{"krate":1,"index":2546}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":58060,"byte_end":58077,"line_start":134,"line_end":134,"column_start":28,"column_end":45},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":591},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":58894,"byte_end":58911,"line_start":158,"line_end":158,"column_start":28,"column_end":45},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":601},"to":{"krate":1,"index":2546}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":58943,"byte_end":58960,"line_start":160,"line_end":160,"column_start":28,"column_end":45},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":601},"to":{"krate":2,"index":9685}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":59517,"byte_end":59524,"line_start":176,"line_end":176,"column_start":6,"column_end":13},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":578},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":68291,"byte_end":68298,"line_start":396,"line_end":396,"column_start":6,"column_end":13},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":353},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/wire.rs","byte_start":68513,"byte_end":68520,"line_start":408,"line_end":408,"column_start":15,"column_end":22},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":353},"to":{"krate":2,"index":3300}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":1324,"byte_end":1329,"line_start":40,"line_end":40,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":3062},"to":{"krate":0,"index":367}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":4711,"byte_end":4720,"line_start":124,"line_end":124,"column_start":23,"column_end":32},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":612},"to":{"krate":0,"index":367}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":5921,"byte_end":5932,"line_start":171,"line_end":171,"column_start":9,"column_end":20},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":615},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":6146,"byte_end":6157,"line_start":178,"line_end":178,"column_start":17,"column_end":28},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":615},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":7259,"byte_end":7270,"line_start":217,"line_end":217,"column_start":26,"column_end":37},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":615},"to":{"krate":2,"index":3300}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":7619,"byte_end":7630,"line_start":227,"line_end":227,"column_start":33,"column_end":44},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":615},"to":{"krate":2,"index":3057}},{"span":{"file_name":"/home/buzz/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-commons-0.29.4/src/lib.rs","byte_start":7669,"byte_end":7680,"line_start":228,"line_end":228,"column_start":33,"column_end":44},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":615},"to":{"krate":2,"index":3069}}]}